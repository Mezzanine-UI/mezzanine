@use 'sass:map';
@use '../size';
@use '../palette';
@use '../typography';
@use '../typography/utils' as utils-typography;

$prefix: mzn-input;
// $colors: (primary, border, error);
// $variants: (contained, outlined, text);
$inputSizes: size.$sizes;

$default-options: (
  label-min-width: 32px,
  label-min-width-small: 24px,
  padding-x: 16px,
  padding-x-small: 12px,
  // icon-size: 24px,
  // icon-size-small: 16px,
);

@function _get-typography-variant-from-size($size) {
  @return map.get(
    (
      small: input3,
      medium: input2,
      large: input1,
    ),
    $size
  );
}

@mixin _padding-x($options, $is-outlined) {
  $padding-x: utils-typography.px-to-rem(map.get($options, padding-x));
  $padding-x-small: utils-typography.px-to-rem(map.get($options, padding-x-small));

  // @if $is-outlined {
  //   $outlined-border-width: map.get($options, outlined-border-width);
  //   $padding-x: calc(#{$padding-x} - #{$outlined-border-width});
  //   $padding-x-small: calc(#{$padding-x-small} - #{$outlined-border-width});
  // }

  &:not(.#{$prefix}--icon) {
    padding: 0 $padding-x;

    &.#{$prefix}--small {
      padding: 0 $padding-x-small;
    }
  }
}

@mixin _size($options) {
  $padding-x: map.get($options, padding-x);
  $padding-x-small: map.get($options, padding-x-small);
  // $icon-size: map.get($options, icon-size);
  // $icon-size-small: map.get($options, icon-size-small);
  // $icon-label-gap-x: map.get($options, icon-label-gap-x);

  // .#{icon.$prefix} {
  //   font-size: utils-typography.px-to-rem($icon-size);
  //   // For icon on the left of button.
  //   margin-left: -#{utils-typography.px-to-rem($icon-label-gap-x)};
  //   margin-right: utils-typography.px-to-rem($icon-label-gap-x);
  // }

  @each $size in $inputSizes {
    $typography-variant: _get-typography-variant-from-size($size);

    &--#{$size} {
      // --mzn-button-height: #{typography.prop($typography-variant, line-height)};

      // height: var(--#{$prefix}-height);

      @include typography.variant($typography-variant);

      // @if $size == small {
      //   .#{icon.$prefix} {
      //     font-size: utils-typography.px-to-rem($icon-size-small);
      //   }
      // }
    }
  }

  @include _padding-x($options, false);
}

@mixin _error() {
  border-color: palette.color(error);
}

@mixin core($options: ()) {
  $options: map.deep-merge($default-options, $options);

  .#{$prefix} {
    display: inline-flex;
    justify-content: flex-start;
    align-items: center;
    border-style: solid;
    border-width: 1px;

    &:hover {
      &:not(:disabled):not(.#{$prefix}--error) {
        &:hover,
        &:focus {
          border-color: palette.color(primary);
        }
      }
    }

    &--error {
      @include _error();
    }

    &:focus {
      outline: none;
      border-color: palette.color(primary);
    }

    @include _size($options);
    @include _padding-x($options, false);
  }
}
