@use 'sass:map';
@use '../size';
@use '../palette';
@use '../typography';
@use '../icon';
@use '../typography/utils' as utils-typography;
@use './utils';

$prefix: mzn-input;
$inputSizes: size.$sizes;

$default-options: (
  padding-x: 16px,
  padding-x-small: 12px,
  padding-x-with-icon: 12px,
  padding-x-small-with-icon: 8px,
  icon-size: 24px,
  icon-size-small: 16px,
  padding-decorator: 4px,
  width: 452px,
  width-small: 388px,
  height: 100px,
);

@function _get-typography-variant-from-size($size) {
  @return map.get(
    (
      small: input3,
      medium: input2,
      large: input1,
    ),
    $size
  );
}

@mixin _padding-x($options, $is-outlined) {
  $padding-x: utils-typography.px-to-rem(map.get($options, padding-x));
  $padding-x-small: utils-typography.px-to-rem(map.get($options, padding-x-small));
  $padding-x-with-icon: utils-typography.px-to-rem(map.get($options, padding-x-with-icon));
  $padding-x-small-with-icon: utils-typography.px-to-rem(map.get($options, padding-x-small-with-icon));

  padding: 0 $padding-x;

  &.textarea {
    padding-top: 8px;
    padding-bottom: 8px;
  }

  &.#{$prefix}-icon--start {
    padding-left: $padding-x-with-icon;
  }

  &.#{$prefix}-icon--end {
    padding-right: $padding-x-with-icon;
  }

  &.#{$prefix}--small {
    padding: 0 $padding-x-small;

    &.textarea {
      padding-top: 8px;
      padding-bottom: 8px;
    }

    &.#{$prefix}-icon--start {
      padding-left: $padding-x-small-with-icon;
    }

    &.#{$prefix}-icon--end {
      padding-right: $padding-x-small-with-icon;
    }
  }
}

@mixin _size($options) {
  $icon-size: map.get($options, icon-size);
  $icon-size-small: map.get($options, icon-size-small);

  .#{icon.$prefix} {
    font-size: utils-typography.px-to-rem($icon-size);
  }

  @each $size in $inputSizes {
    $typography-variant: _get-typography-variant-from-size($size);

    &--#{$size} {
      @include typography.variant($typography-variant);

      @if $size == small {
        .#{icon.$prefix} {
          font-size: utils-typography.px-to-rem($icon-size-small);
        }
      }
    }
  }
}

@mixin _width($options) {
  $height: utils-typography.px-to-rem(map.get($options, height));
  $width: utils-typography.px-to-rem(map.get($options, width));
  $width-small: utils-typography.px-to-rem(map.get($options, width-small));

  min-width: $width;
  width: 100%;
  min-height: $height;

  &.#{$prefix}--small {
    min-width: $width-small;
  }
}

@mixin core($options: ()) {
  $options: map.deep-merge($default-options, $options);

  .#{$prefix} {
    @include utils.reset();
    @include _padding-x($options, false);
    @include _size($options);

    display: inline-flex;
    position: relative;
    justify-content: space-between;
    align-items: center;
    border-width: 1px;
    border-style: solid;
    border-color: palette.color(border);
    background-color: palette.color(surface);
    box-sizing: border-box;

    &.textarea {
      @include _width($options);
    }

    &:hover {
      &:not(.#{$prefix}--disabled):not(.#{$prefix}--error) {
        &:hover {
          border-color: palette.color(primary);
        }

        .#{$prefix}--clearButton {
          opacity: 1;
          color: palette.color(primary);
        }
      }
    }

    &.#{$prefix}--error {
      border-color: palette.color(error);
    }

    &.#{$prefix}--disabled {
      border-color: transparent;
      background-color: palette.color(action-disabled-bg);

      ::placeholder {
        color: palette.color(text-disabled);
      }
    }

    &--tag {
      width: 100%;
      background-color: transparent;
      color: inherit;
      font-size: inherit;
      line-height: inherit;
      margin: -1px;
      border: none;
      outline: none;
      padding: 0;
      box-sizing: border-box;
      resize: none;
      @include _size($options);

      ::placeholder {
        color: palette.color(text-secondary);
      }

      &.#{$prefix}--tag:focus + .#{$prefix}--counting {
        color: palette.color(primary);
      }

      &.#{$prefix}--tag:focus + .#{$prefix}--clearButton {
        opacity: 1;
        color: palette.color(primary);
      }

      &.textarea {
        height: 100%;
      }
    }

    &:focus-within {
      border-color: palette.color(primary);

      &:not(.#{$prefix}--disabled) {
        border-color: palette.color(primary);
      }
    }

    &--clearButton {
      border: none;
      padding: 0;
      background-color: transparent;
      outline: none;
      cursor: pointer;
      opacity: 0;
    }

    &-decorator {
      display: flex;
      justify-content: center;
      align-items: center;
      white-space: nowrap;
      color: var(--mzn-color-action-inactive);

      $padding-decorator: utils-typography.px-to-rem(map.get($options, padding-decorator));

      &.mzn-input-icon--start {
        padding: 0 $padding-decorator 0 0;
      }

      &.mzn-input-icon--end {
        padding: 0 0 0 $padding-decorator;
      }
    }

    &--counting {
      position: absolute;
      bottom: -20px;
      right: 0;

      &.#{$prefix}--disabled {
        color: palette.color(action-disabled-bg);
      }

      &.#{$prefix}--error {
        color: palette.color(error);
      }

      @include typography.variant(caption);
    }
  }
}
