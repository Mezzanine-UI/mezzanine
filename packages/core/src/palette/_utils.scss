@use 'sass:color';
@use 'sass:list';
@use 'sass:math';

// Calculate the luminance for a color.
// See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
@function luminance($color) {
  $red: list.nth(constants.$linear-channel-values, color.red($color) + 1);
  $green: list.nth(constants.$linear-channel-values, color.green($color) + 1);
  $blue: list.nth(constants.$linear-channel-values, color.blue($color) + 1);

  @return 0.2126 * $red + 0.7152 * $green + 0.0722 * $blue;
}

// Calculate the contrast ratio between two colors.
// See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
@function contrast($background, $foreground) {
  $backgroundLum: luminance($background) + 0.05;
  $foregroundLum: luminance($foreground) + 0.05;

  @return math.max($backgroundLum, $foregroundLum) / math.min($backgroundLum, $foregroundLum);
}

// Determine whether the color is 'light' or 'dark'.
@function tone($color) {
  @if $color == "dark" or $color == "light" {
    @return $color;
  }

  $minimumContrast: 3.1;

  $lightContrast: contrast($color, white);
  $darkContrast: contrast($color, black);

  @if ($lightContrast < $minimumContrast) and ($darkContrast > $lightContrast) {
    @return "light";
  } @else {
    @return "dark";
  }
}

// Determine whether to use dark or light text on top of given color to meet accessibility standards for contrast.
// Returns 'dark' if the given color is light and 'light' if the given color is dark.
@function contrast-tone($color) {
  @return if(tone($color) == "dark", "light", "dark");
}
