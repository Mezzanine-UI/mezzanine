@use 'sass:map';
@use '../utils/list';
@use '../orientation';
@use '../size';
@use '../palette';
@use '../typography/utils' as utils-typography;
@use '../typography';
@use '../icon';

$prefix: mzn-upload;
$input-prefix: #{$prefix}-input;
$result-prefix: #{$prefix}-result;
$sizes: size.$sizes;

$default-options: (
  min-width: 292px,
  padding-left: 16px,
  padding-left-small: 12px,
  padding-right: 8px,
  padding-right-small: 4px,
  icon-size: 24px,
  icon-size-small: 16px,
  icon-gap: 4px,
  name-icon-gap: 4px,
);

@mixin _result-core($options) {
  $min-width: map.get($options, min-width);
  $padding-left: map.get($options, padding-left);
  $padding-left-small: map.get($options, padding-left-small);
  $padding-right: map.get($options, padding-right);
  $padding-right-small: map.get($options, padding-right-small);
  $icon-size: map.get($options, icon-size);
  $icon-size-small: map.get($options, icon-size-small);
  $icon-gap: map.get($options, icon-gap);
  $name-icon-gap: map.get($options, name-icon-gap);

  .#{$result-prefix} {
    display: flex;
    align-items: center;
    position: relative;
    background-color: palette.color(surface);
    border: 1px solid palette.color(border);
    min-width: $min-width;
    padding: 0 $padding-right 0 $padding-left;
    overflow: hidden;
    box-sizing: border-box;

    .#{icon.$prefix} {
      cursor: pointer;
    }

    &__name {
      width: 100%;

      @include utils-typography.overflow-ellipsis();
    }

    &__actions {
      display: inline-grid;
      grid-auto-flow: column;
      gap: $icon-gap;
      align-items: center;
      flex-shrink: 0;
      font-size: var(--#{$result-prefix}-icon-size, utils-typography.px-to-rem($icon-size));
      color: var(--#{$result-prefix}-action-color, palette.color(action-inactive));
      margin-left: $name-icon-gap;
    }

    &--loading {
      --#{$result-prefix}-action-color: #{palette.color(primary)};

      &::before {
        position: absolute;
        content: "";
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: palette.color(primary-hover-bg);
        transform-origin: left;
        transform: scaleX(calc(var(--#{$result-prefix}-percentage, 0) / 100));
      }

      .#{icon.$prefix} {
        cursor: default;
        pointer-events: none;
      }
    }

    &:hover {
      &:not(.#{$result-prefix}--error) {
        --#{$result-prefix}-action-color: #{palette.color(primary)};

        border-color: palette.color(primary);
      }
    }

    &--error {
      --#{$result-prefix}-action-color: #{palette.color(error)};

      border-color: palette.color(error);
      color: palette.color(error);
    }

    @each $size in $sizes {
      &--#{$size} {
        @if $size == small {
          --#{$result-prefix}-icon-size: #{utils-typography.px-to-rem($icon-size-small)};

          padding: 0 $padding-right-small 0 $padding-left-small;
        }

        @include typography.variant(
          map.get(
            (
              small: input3,
              medium: input2,
              large: input1,
            ),
            $size
          )
        );
      }
    }
  }
}

@mixin core($options: ()) {
  $options: map.deep-merge($default-options, $options);

  .#{$input-prefix} {
    position: absolute;
    width: 0;
  }

  @include _result-core($options);
}
