@use 'sass:map';
@use '../size';
@use '../palette';
@use '../typography';
@use '../icon';
@use '../typography/utils' as utils-typography;
@use './utils';

$prefix: mzn-textarea;
$textareaSizes: size.$sizes;

$default-options: (
  width:290px,
  width-small: 246px,
  height: 100px,
  padding-x: 16px,
  padding-x-small: 12px,
);

@function _get-typography-variant-from-size($size) {
  @return map.get(
    (
      small: body2,
      medium: body1,
      large: body1,
    ),
    $size
  );
}

@mixin _width($options) {
  $height: utils-typography.px-to-rem(map.get($options, height));
  $width: utils-typography.px-to-rem(map.get($options, width));
  $width-small: utils-typography.px-to-rem(map.get($options, width-small));

  min-width: $width;
  width: 100%;
  min-height: $height;

  &.#{$prefix}--small {
    min-width: $width-small;
  }
}

@mixin _padding-x($options) {
  $padding-x: utils-typography.px-to-rem(map.get($options, padding-x));
  $padding-x-small: utils-typography.px-to-rem(map.get($options, padding-x-small));

  padding: 8px $padding-x;

  &.#{$prefix}--small {
    padding: 8px $padding-x-small;
  }
}

@mixin _size($options) {
  @each $size in $textareaSizes {
    $typography-variant: _get-typography-variant-from-size($size);

    &--#{$size} {
      @include typography.variant($typography-variant);
    }
  }
}

@mixin core($options: ()) {
  $options: map.deep-merge($default-options, $options);

  .#{$prefix} {
    @include utils.reset();

    &--wrapper {
      display: inline-flex;
      position: relative;
      justify-content: space-between;
      align-items: center;
      border-width: 1px;
      border-style: solid;
      border-color: palette.color(border);
      background-color: palette.color(surface);

      &:hover {
        &:not(.#{$prefix}--disabled):not(.#{$prefix}--error) {
          &:hover {
            border-color: palette.color(primary);
          }
        }
      }

      ::placeholder {
        color: palette.color(text-secondary);
      }

      &.#{$prefix}--disabled {
        background-color: palette.color(action-disabled-bg);
        border-color: transparent;

        ::placeholder {
          color: palette.color(text-disabled);
        }
      }

      &.#{$prefix}--error {
        border-color: palette.color(error);
      }

      @include _width($options);
    }

    &--wrapper:focus-within {
      border-color: palette.color(primary);

      &:not(.#{$prefix}--disabled) {
        border-color: palette.color(primary);
      }
    }

    &.#{$prefix}:focus + .#{$prefix}--counting {
      color: palette.color(primary);
    }

    @include _size($options);
    @include _padding-x($options);

    &--counting {
      position: absolute;
      bottom: -20px;
      right: 0;

      &.#{$prefix}--disabled {
        color: palette.color(action-disabled-bg);
      }

      &.#{$prefix}--error {
        color: palette.color(error);
      }

      @include typography.variant(caption);
    }
  }
}
