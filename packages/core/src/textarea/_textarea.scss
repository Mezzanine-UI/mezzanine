@use 'sass:map';
@use '../palette';
@use '../typography';
@use '../text-field';

$prefix: mzn-textarea;
$sizes: text-field.$sizes;

$default-options: (
  text-field: text-field.$default-options,
  min-width: 452px,
  min-width-small: 388px,
  min-height: 102px,
  padding-y: 8px,
  count-gap: 4px,
);

@mixin core($options: ()) {
  $options: map.deep-merge($default-options, $options);
  $text-field-options: map.get($options, text-field);
  $min-width: map.get($options, min-width);
  $min-width-small: map.get($options, min-width-small);
  $min-height: map.get($options, min-height);
  $padding-y: map.get($options, padding-y);
  $count-gap: map.get($options, count-gap);

  @include text-field.core($text-field-options);

  .#{$prefix} {
    min-width: $min-width;
    min-height: $min-height;
    padding: #{$padding-y} 0;

    textarea {
      height: 100%;
      margin: 0;
      padding-left: var(--#{text-field.$prefix}-padding-left);
      padding-right: var(--#{text-field.$prefix}-padding-right);

      @include typography.variant(body1);
    }

    .#{text-field.$prefix}__clear-icon {
      top: $padding-y;
    }

    &.#{text-field.$prefix}--small {
      min-width: $min-width-small;

      textarea {
        @include typography.variant(body2);
      }
    }

    &__count {
      position: absolute;
      top: calc(100% + #{$count-gap});
      right: 0;
      color: palette.color(text-secondary);

      .#{$prefix}--upper-limit & {
        color: palette.color(primary);
      }

      .#{text-field.$prefix}--error & {
        color: palette.color(error);
      }

      .#{text-field.$prefix}--disabled & {
        color: palette.color(text-disabled);
      }
    }
  }
}
