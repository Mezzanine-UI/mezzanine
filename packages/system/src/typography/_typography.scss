@use 'sass:math';
@use 'sass:meta';
@use '../utils/list';
@use '../utils/map';
@use '../utils/string';
@use './utils' as *;

$prefix: mzn-typography;
$base-props: (font-family);
$props: list.push($base-props, font-size, font-weight, letter-spacing, line-height);
$variants: (h1, h2, h3, h4, h5, h6, body1, body2, caption, button1, button2, button3, input1, input2, input3);

$default-options: (
  base: (
    font-family: string.unquote("PingFang TC, Microsoft JhengHei"),
  ),
  h1: (
    font-size: px-to-rem(32px),
    font-weight: 600,
    letter-spacing: px-to-em(4px),
    line-height: px-to-rem(48px),
  ),
  h2: (
    font-size: px-to-rem(24px),
    font-weight: 600,
    letter-spacing: px-to-em(2px),
    line-height: px-to-rem(36px),
  ),
  h3: (
    font-size: px-to-rem(22px),
    font-weight: 500,
    letter-spacing: px-to-em(2px),
    line-height: px-to-rem(32px),
  ),
  h4: (
    font-size: px-to-rem(18px),
    font-weight: 500,
    letter-spacing: px-to-em(1px),
    line-height: px-to-rem(28px),
  ),
  h5: (
    font-size: px-to-rem(15px),
    font-weight: 500,
    letter-spacing: 0,
    line-height: px-to-rem(24px),
  ),
  h6: (
    font-size: px-to-rem(13px),
    font-weight: 500,
    letter-spacing: 0,
    line-height: px-to-rem(20px),
  ),
  button1: (
    font-size: px-to-rem(15px),
    font-weight: 500,
    letter-spacing: px-to-em(2px),
    line-height: px-to-rem(40px),
  ),
  button2: (
    font-size: px-to-rem(15px),
    font-weight: 500,
    letter-spacing: px-to-em(2px),
    line-height: px-to-rem(32px),
  ),
  button3: (
    font-size: px-to-rem(13px),
    font-weight: 500,
    letter-spacing: px-to-em(1px),
    line-height: px-to-rem(24px),
  ),
  input1: (
    font-size: px-to-rem(15px),
    font-weight: 400,
    letter-spacing: px-to-em(1px),
    line-height: px-to-rem(40px),
  ),
  input2: (
    font-size: px-to-rem(15px),
    font-weight: 400,
    letter-spacing: px-to-em(1px),
    line-height: px-to-rem(32px),
  ),
  input3: (
    font-size: px-to-rem(13px),
    font-weight: 400,
    letter-spacing: 0,
    line-height: px-to-rem(24px),
  ),
  body1: (
    font-size: px-to-rem(15px),
    font-weight: 400,
    letter-spacing: 0,
    line-height: px-to-rem(24px),
  ),
  body2: (
    font-size: px-to-rem(13px),
    font-weight: 400,
    letter-spacing: 0,
    line-height: px-to-rem(20px),
  ),
  caption: (
    font-size: px-to-rem(12px),
    font-weight: 400,
    letter-spacing: 0,
    line-height: px-to-rem(16px),
  ),
);

@function is-variant-valid($variant) {
  @return list.includes($variants, $variant);
}

@function is-base-prop-valid($prop) {
  @return list.includes($base-props, $prop);
}

@function is-prop-valid($prop) {
  @return list.includes($props, $prop);
}

@function base-prop($prop, $fallback: null) {
  @if not is-baseprop-valid($prop) {
    @error "Invalid base prop #{$prop}. Please choose one of #{$props}";
  }

  $varname: --#{$prefix}-#{$prop};

  @if $fallback == null {
    @return var(#{$varname});
  }

  @return var(#{$varname}, $fallback);
}

// Get the css variable of the specific prop of variant.
@function prop($variant, $prop, $fallback: null) {
  @if not is-variant-valid($variant) {
    @error "Invalid variant #{$variant}. Please choose one of #{$variants}";
  }

  @if not is-prop-valid($prop) {
    @error "Invalid prop #{$prop}. Please choose one of #{$props}";
  }

  $varname: --#{$prefix}-#{$variant}-#{$prop};

  @if $fallback == null {
    @return var(#{$varname});
  }

  @return var(#{$varname}, $fallback);
}

@function font($variant, $exclude-props: ()) {
  @each $prop in $exclude-props {
    @if $prop == font-family or $prop == font-size or not is-prop-valid($prop) {
      @error "Invalid prop #{$prop}. Please choose one of #{$props}";
    }
  }

  $font-size: prop($variant, font-size);
  $font-family: prop($variant, font-family);
  $font-weight: if(list.includes($exclude-props, font-weight), null, prop($variant, font-weight));

  @if not list.includes($exclude-props, line-height) {
    $font-size: $font-size/prop($variant, line-height);
  }

  @return $font-weight $font-size $font-family;
}

@mixin variant($variant, $exclude-props: ()) {
  // Only accept valid props.
  @each $prop in $exclude-props {
    @if not is-prop-valid($prop) {
      @error "Invalid prop #{$prop}. Please choose one of #{$props}";
    }
  }

  @if not list.includes($exclude-props, font-size) and not list.includes($exclude-props, font-family) {
    font: font($variant, $exclude-props);

    @if not list.includes($exclude-props, letter-spacing) {
      letter-spacing: prop($variant, letter-spacing);
    }
  } @else {
    @each $prop, $value in $props {
      @if not list.includes($exclude-props, $prop) {
        #{$prop}: prop($variant, $prop);
      }
    }
  }
}

@mixin partial-variables($options: ()) {
  $base: map.get($options, "base");
  $variants-options: map.omit($options, ("base"));

  @if $base != null {
    @each $prop, $value in $base {
      @if not is-base-prop-valid($prop) {
        @error "Invalid base prop #{$prop}. Please choose one of #{$props}";
      }

      @if $value != null {
        --#{$prefix}-#{$prop}: #{$value};
      }
    }
  }

  @if $variants-options {
    @each $variant, $props-options in $variants-options {
      @if not is-variant-valid($variant) {
        @error "Invalid variant #{$variant}. Please choose one of #{$variants}";
      }

      @each $prop, $value in $props-options {
        @if not is-prop-valid($prop) {
          @error "Invalid prop #{$prop}. Please choose one of #{$props}";
        }

        @if $value != null {
          --#{$prefix}-#{$variant}-#{$prop}: #{$value};
        }
      }
    }
  }
}

@mixin variables($options: (), $defaults: $default-options) {
  $options: map.deep-merge($defaults, $options);
  $variants-options: map.omit($options, ("base"));

  @each $variant, $props-options in $variants-options {
    @if not is-variant-valid($variant) {
      @error "Invalid variant #{$variant}. Please choose one of #{$variants}";
    }

    @each $prop in $base-props {
      $value: map.get($options, $variant, $prop);

      @if $value == null {
        $options: map.set($options, $variant, $prop, base-prop($prop));
      }
    }
  }

  @include partial-variables($options);
}

@mixin inherit {
  @each $prop in $props {
    #{$prop}: inherit;
  }
}
