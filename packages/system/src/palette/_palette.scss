@use 'sass:map';
@use 'sass:meta';
@use '../utils/list' as utils-list;
@use '../utils/map' as utils-map;
@use '../utils/string' as utils-string;

$prefix: mzn-color;

@function _get-main-related-color-names($color) {
  @return ($color, #{$color}-light, #{$color}-dark, #{$color}-hover-bg, #{$color}-active-bg, on-#{$color});
}

@function _get-main-color-transformed-palette($color) {
  $rgba: meta.get-function("rgba");

  @return (
    #{$color}-hover-bg: (
      from: #{$color}-light,
      transformer: $rgba,
      args: (
        0.15,
      )
    ),
    #{$color}-active-bg: (
      from: $color,
      transformer: $rgba,
      args: (
        0.2,
      )
    )
  );
}

@function _transform-color-from-palette($palette, $config) {
  $transformer: map.get($config, transformer);
  $from: map.get($palette, map.get($config, from));
  $args: map.get($config, args);

  @return meta.call($transformer, $from, $args...);
}

$main-color-names: (primary, secondary, error, warning, success);
$color-names: utils-list.flat-push(
  utils-list.flat-map($main-color-names, meta.get-function("_get-main-related-color-names")),
  (
    text-primary,
    text-secondary,
    text-disabled,
    action-active,
    action-inactive,
    action-disabled,
    action-disabled-bg,
    bg,
    surface,
    border,
    divider
  )
);

$default-semantic-palette: utils-map.assign(
  (
    error: #db2b1d,
    error-light: #f75142,
    error-dark: #c00f03,
    on-error: #fff,
  ),
  _get-main-color-transformed-palette(error),
  (
    warning: #f7ac38,
    warning-light: #fdd948,
    warning-dark: #f1842b,
    on-warning: #fff,
  ),
  _get-main-color-transformed-palette(warning),
  (
    success: #2e8d36,
    success-light: #42ae4a,
    success-dark: #0c5d19,
    on-success: #fff,
  ),
  _get-main-color-transformed-palette(success)
);

$default-light-palette: utils-map.assign(
  (
    primary: #465bc7,
    primary-light: #778de8,
    primary-dark: #2d2d9e,
    on-primary: #fff,
  ),
  _get-main-color-transformed-palette(primary),
  (
    secondary: #383838,
    secondary-light: #6a6a6a,
    secondary-dark: #161616,
    on-secondary: #fff,
  ),
  _get-main-color-transformed-palette(secondary),
  $default-semantic-palette,
  (
    text-primary: #161616,
    text-secondary: #8f8f8f,
    text-disabled: #bcbcbc,
    action-active: #161616,
    action-inactive: #8f8f8f,
    action-disabled: #bcbcbc,
    action-disabled-bg: #e5e5e5,
    bg: #f4f4f4,
    surface: #fff,
    border: #d9d9d9,
    divider: #e5e5e5,
  )
);

$default-dark-palette: utils-map.assign(
  (
    primary: #667cd8,
    primary-light: #92a7ff,
    primary-dark: #3440b2,
    on-primary: #fff,
  ),
  _get-main-color-transformed-palette(primary),
  (
    secondary: #6a6a6a,
    secondary-light: #b2b2b2,
    secondary-dark: #383838,
    on-secondary: #fff,
  ),
  _get-main-color-transformed-palette(secondary),
  $default-semantic-palette,
  (
    text-primary: #fff,
    text-secondary: #a8a8a8,
    text-disabled: #595959,
    action-active: #fff,
    action-inactive: #a8a8a8,
    action-disabled: #595959,
    action-disabled-bg: #393939,
    bg: #161616,
    surface: #242424,
    border: #7c7c7c,
    divider: #494949,
  )
);

$default-palette: (
  light: $default-light-palette,
  dark: $default-dark-palette,
);

@function is-color-name-valid($color-name) {
  @return utils-list.includes($color-names, $color-name);
}

@mixin variables($mode, $palette: ()) {
  $palette: map.deep-merge($default-palette, $palette);
  $palette: map.get($palette, $mode);

  @each $color-name, $color in $palette {
    @if not is-color-name-valid($color-name) {
      @error "Invalid color name #{$color-name}. Please choose one of #{$color-names}";
    }

    @if meta.type-of($color) != "color" {
      $color: _transform-color-from-palette($palette, $color);
    }

    --#{$prefix}-#{$color-name}: #{$color};
  }
}

@function color($color-name) {
  @if not is-color-name-valid($color-name) {
    @error "Invalid color name #{$color-name}. Please choose one of #{$color-names}";
  }

  @return var(--#{$prefix}-#{$color-name});
}
